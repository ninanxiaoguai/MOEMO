% ******************************************************************************
% * Version: 1.0.1
% * Last modified on: 27 October, 2016 
% * Developers: Michael G. Epitropakis, Xiaodong Li.
% *      email: m_(DOT)_epitropakis_(AT)_lancaster_(DOT)_ac_(DOT)_uk 
% *           : xiaodong_(DOT)_li_(AT)_rmit_(DOT)_edu_(DOT)_au 
% * ****************************************************************************
%ATTENTION: USE THIS FUNCTION ONLY FOR STATISTICAL PURPOSES
%TODO: Accuracy of the optima positions might vary per function.
%The function returns a number_of_global_optima x number_of_dimension matrix
%each row contains a different optimum position
function [o] = get_xgoptima(nfunc)
total_func_no = 20;

if nfunc > 10 & nfunc <= total_func_no
	load data/optima.mat; % saved the predefined optima, a 10*100 matrix;
	D = get_dimension(nfunc);
	o = o(:,1:D);
	return;
end

if nfunc == 1	    fname = 'data/F1_opt.dat';
elseif nfunc == 2	fname = 'data/F2_opt.dat';
elseif nfunc == 3	fname = 'data/F3_opt.dat';
elseif nfunc == 4	fname = 'data/F4_opt.dat';
elseif nfunc == 5	fname = 'data/F5_opt.dat';
elseif nfunc == 6	fname = 'data/F6_2D_opt.dat';
elseif nfunc == 7	fname = 'data/F7_2D_opt.dat';
elseif nfunc == 8	fname = 'data/F6_3D_opt.dat';
elseif nfunc == 9	fname = 'data/F7_3D_opt.dat';
elseif nfunc == 10	fname = 'data/F8_2D_opt.dat';
else
	fprintf('ERROR: Wrong function number: (%d).\n', nfunc);
	fprintf('       Please provide a function number in {1,2,...,%d}\n', total_func_no);
	fprintf('       For now function number == 1\n');
	fname = '';
end

o = load(fname); % saved the predefined optima

% function [x] = get_xgoptima(func_num)
% if func_num == 1	
%     x = [0; 30];
% elseif func_num == 2	
%     x = [0.1; 0.3; 0.5; 0.7; 0.9];
% elseif func_num == 3	
%     x = 0.08;
% elseif func_num == 4	
%     x = [3.58,-1.86; 3.0, 2.0; -2.815, 3.125; -3.78, -3.28];
% elseif func_num == 5	
%     x = [0.0898, -0.7126; -0.0898, 0.7126];
% elseif func_num == 6	% 18
%     x = [-7.70831373451100,-7.08350640779676;-7.70831373496851,5.48286420583869;-7.70831373523494,-0.800321099687372;-7.08350640779317,4.85805687840641;-7.08350640621698,-1.42512842884789;-7.08350640991757,-7.70831373665228;-1.42512842819310,-0.800321100343602;-1.42512842823528,5.48286420697481;-1.42512842935191,-7.08350640845829;-0.800321101317108,-1.42512842753996;-0.800321099651875,-7.70831373461979;-0.800321100366573,4.85805687764322;4.85805687872021,5.48286420750680;4.85805687957780,-7.08350640778537;4.85805687814463,-0.800321099873115;5.48286420587199,-7.70831373564020;5.48286420740084,-1.42512842839682;5.48286420812040,4.85805687879775];
% elseif func_num == 7	% 36
%     x = [0.333018435016982,0.333018435319558;0.333018435294465,4.11120713820516;0.333018435006243,0.624228433636185;0.333018435577334,1.17008878568447;0.333018435077486,7.70627725490888;0.333018435752238,2.19328005037410;0.624228433432957,0.624228433931923;0.624228433221774,2.19328005341238;0.624228433651795,1.17008878863301;0.624228434010031,4.11120714974159;0.624228434661324,0.333018435371888;0.624228433913206,7.70627726674551;1.17008878883696,0.333018435488617;1.17008878677493,4.11120713945572;1.17008878703467,2.19328005321465;1.17008878859758,0.624228432944440;1.17008878810939,1.17008878865173;1.17008878567354,7.70627724915455;2.19328004778479,0.624228433448941;2.19328004776552,1.17008878729896;2.19328005460488,4.11120714331164;2.19328005091418,7.70627726741323;2.19328005323445,2.19328005104204;2.19328004753655,0.333018435617636;4.11120714305623,0.333018435017208;4.11120714677315,0.624228434531510;4.11120713879005,2.19328004826589;4.11120714682027,7.70627725219643;4.11120713867684,1.17008878857006;4.11120714019348,4.11120713789895;7.70627725800690,0.333018435960631;7.70627725096367,2.19328004986653;7.70627726170214,4.11120713631701;7.70627724888646,7.70627726313899;7.70627725913147,1.17008878844558;7.70627725171908,0.624228432648873];
% elseif func_num == 8	% 81
%     x = [-7.70831373579035,5.48286420578024,-7.08350640899218;-7.70831373356302,-0.800321101296015,5.48286420764086;-7.70831373544315,5.48286420646646,5.48286420615265;-7.70831373481109,-7.08350640972226,-7.08350641009299;-7.70831373506750,-0.800321098662703,-0.800321102077367;-7.70831373413182,-7.08350640993003,5.48286420654518;-7.70831373664615,5.48286420458634,-0.800321103489334;-7.70831373500752,-7.08350640753151,-0.800321102616597;-7.70831373509322,-0.800321099348732,-7.08350640666050;-7.08350640815633,5.48286420500502,-1.42512842603564;-7.08350640520418,-7.08350640796436,-7.70831373656396;-7.08350640449063,-0.800321099930030,4.85805687775533;-7.08350640645311,-7.70831373815599,5.48286420820881;-7.08350640686018,4.85805687925243,-7.08350640674028;-7.08350640666818,-1.42512842924832,5.48286420639803;-7.08350640827529,-7.08350640677640,-1.42512843166286;-7.08350640714653,-0.800321100887681,-7.70831373627349;-7.08350640894622,-1.42512842857988,-7.08350640742091;-7.08350640552700,-7.70831373554276,-7.08350641062737;-7.08350640942474,-1.42512842688540,-0.800321100064007;-7.08350640926798,-7.70831373609288,-0.800321100928139;-7.08350640745478,-7.08350640793367,4.85805687807593;-7.08350640780297,4.85805687811755,5.48286420687611;-7.08350640848272,5.48286420717830,4.85805687998452;-7.08350640766262,4.85805687887270,-0.800321100514219;-7.08350640637796,-0.800321099119193,-1.42512842858111;-7.08350640912401,5.48286420884989,-7.70831373459769;-1.42512842771246,-7.08350640866810,-7.08350640993913;-1.42512842998409,-0.800321100830161,5.48286420774231;-1.42512842737951,-0.800321101495368,-7.08350640838532;-1.42512842715760,-7.08350640800384,5.48286420467494;-1.42512842938254,-0.800321100744064,-0.800321099385630;-1.42512842969893,5.48286420502647,-0.800321100698072;-1.42512842762986,5.48286420607445,-7.08350640779700;-1.42512842727473,-7.08350640774760,-0.800321099221936;-1.42512842922749,5.48286420746807,5.48286420655603;-0.800321100302505,5.48286420667187,4.85805687908669;-0.800321100360911,-7.08350640759273,-1.42512842671007;-0.800321100055565,4.85805688035345,5.48286420827053;-0.800321100980584,4.85805687862886,-7.08350640576765;-0.800321101302760,4.85805687732375,-0.800321100827539;-0.800321100312924,-0.800321099806639,-7.70831373585516;-0.800321100144214,-1.42512842826563,5.48286420774593;-0.800321100841506,-7.08350640811659,4.85805687955644;-0.800321099448424,-7.70831373764082,5.48286420578213;-0.800321100428159,5.48286420687962,-1.42512842775055;-0.800321099662887,-1.42512842961432,-0.800321100579779;-0.800321099602973,-7.70831373688715,-7.08350640682511;-0.800321099499488,-1.42512842704520,-7.08350640813197;-0.800321100863466,5.48286420753377,-7.70831373621900;-0.800321100763757,-0.800321100941057,4.85805688082101;-0.800321101092664,-7.08350640730620,-7.70831373334826;-0.800321100768651,-7.70831373412983,-0.800321100288219;-0.800321100077888,-0.800321099053887,-1.42512842691872;4.85805687977349,5.48286420579855,-7.08350640575888;4.85805687839010,-0.800321099972247,5.48286420920612;4.85805687974806,5.48286420620462,-0.800321100475891;4.85805687967172,-0.800321101333576,-0.800321098832763;4.85805688010444,5.48286420772569,5.48286420817423;4.85805688076192,-0.800321099948288,-7.08350641110995;4.85805687818696,-7.08350640861931,-0.800321101822263;4.85805687882279,-7.08350641001722,-7.08350640739588;4.85805687657826,-7.08350640942708,5.48286420704766;5.48286420765624,-7.70831373479477,5.48286420496978;5.48286420617369,-0.800321100712547,-7.70831373530836;5.48286420880913,-7.08350640776486,4.85805687786032;5.48286420961660,-1.42512842634418,5.48286420719101;5.48286420938117,-1.42512842703102,-7.08350640422953;5.48286420703314,-0.800321100452247,4.85805687697792;5.48286420733679,5.48286420846367,-7.70831373345462;5.48286420687323,-7.70831373509238,-0.800321100707727;5.48286420828919,4.85805687807457,-7.08350640907081;5.48286420698663,5.48286420730028,4.85805687885945;5.48286420624019,-1.42512842871531,-0.800321099108546;5.48286420742298,-7.08350640752930,-1.42512842866370;5.48286420712813,4.85805687916899,-0.800321099529551;5.48286420825363,-7.08350640702143,-7.70831373867077;5.48286420655534,-7.70831373745701,-7.08350640829789;5.48286420571202,5.48286420571927,-1.42512843109334;5.48286420552683,4.85805687981449,5.48286420619784;5.48286420584059,-0.800321098697094,-1.42512842900074];
% elseif func_num == 9	% 216
%     x = []; % Unknown Yet
% elseif func_num == 10	% 12
%     x = [0.166666666967960,0.124999999871172;0.166666666130362,0.875000000328679;0.166666666113631,0.624999999647863;0.166666667064795,0.374999999669487;0.499999999704628,0.874999999909254;0.499999999647541,0.374999999929349;0.500000000340440,0.624999999831735;0.500000000234663,0.125000000150805;0.833333333336751,0.374999999669766;0.833333333826502,0.124999999903742;0.833333333784306,0.624999999674259;0.833333333863901,0.874999999709230];
% elseif func_num >= 11 & func_num <= 20	
%     load data/optima.mat % saved the predefined optima, a 10*100 matrix;
%     N = get_no_goptima(func_num);
%     D = get_dimension(func_num);
%     x(1:N,1:D) = o(1:N,1:D);
% else
% 	fprintf('ERROR: Wrong function number: (%d).\n', func_num);
% 	fprintf('       Please provide a function number in {1,2,...,%d}\n', total_func_no);
% 	fprintf('       For now function number == 1\n');
% 	fname = str2func('five_uneven_peak_trap');
% end